trigger:
- main

variables:
  azureServiceConnectionId: "Conexion-Flask-Students"
  webAppName: "mi-flask-app-2025"
  # Última corrección del Grupo de Recursos
  resourceGroup: "RG-MIAppFlask" 
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.10'

# ===============================================================
# Etapa de Build
# ===============================================================
stages:
  - stage: Build
    displayName: "1. Build Stage"
    jobs:
      - job: BuildJob
        displayName: "Build and Package"
        pool:
          name: "Default"
        steps:
          # CLAVE: Configurar Python para que no falle Cmd.exe
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
            displayName: 'Use Python $(pythonVersion)'

          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            workingDirectory: $(projectRoot)
            displayName: "Install Python dependencies"

          - task: ArchiveFiles@2
            displayName: "Archive project files"
            inputs:
              rootFolderOrFile: "$(projectRoot)"
              includeRootFolder: false
              archiveType: zip
              archiveFile: "$(Build.ArtifactStagingDirectory)/drop.zip"
              replaceExistingArchive: true

          - publish: "$(Build.ArtifactStagingDirectory)/drop.zip"
            artifact: drop
            displayName: "Publish deployment package"

# ===============================================================
# Etapa de Test (Restaurada)
# ===============================================================
  - stage: Test
    displayName: "2. Run Automated Tests"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: RunTests
        displayName: "Execute Tests and Generate Reports"
        pool:
          name: "Default"
        steps:
          # CLAVE: Configurar Python para que no falle Cmd.exe
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
            displayName: 'Use Python $(pythonVersion)'
          
          # Descargar artefactos para ejecutar pruebas en el código
          - download: current
            artifact: drop
            displayName: 'Download build artifacts for testing'

          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
              pip install pytest pytest-cov unittest-xml-reporting
            workingDirectory: $(projectRoot)
            displayName: "Install test dependencies"

          - script: |
              echo "INICIANDO EJECUCIÓN DE PRUEBAS AUTOMÁTICAS"
              python -m pytest tests/ -v --cov=./ --cov-report=xml:coverage.xml --cov-report=html:coverage_html --junitxml=test-results.xml
            displayName: "Run Tests with Coverage and Metrics"
            env:
              # Usar variables del pipeline, ya que las variables de App Service solo están disponibles en Azure
              DATABASE_URL: $(DATABASE_URL)
              SECRET_KEY: $(SECRET_KEY)

          # Tareas de Publicación de Resultados... (Restauradas)
          - task: PublishTestResults@2
            displayName: "Publish Test Results to Azure"
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "test-results.xml"
              testRunTitle: "Don Galleto - Test Results"
              failTaskOnFailedTests: true
              
          - task: PublishCodeCoverageResults@1
            displayName: "Publish Code Coverage Report"
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: "$(projectRoot)/coverage.xml"

# ===============================================================
# Etapa de Deploy (Restaurada)
# ===============================================================
  - stage: Deploy
    displayName: "3. Deploy Web App"
    dependsOn: Test
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: "Deploy to Azure Web App Linux"
        pool:
          name: "Default"
        steps:
          - download: current
            artifact: drop
            displayName: "Download build artifacts"

          # Habilitar logs (Restaurado)
          - task: AzureCLI@2
            displayName: "Enable Application Logging"
            inputs:
              azureSubscription: "$(azureServiceConnectionId)"
              scriptType: "ps"
              scriptLocation: "inlineScript"
              inlineScript: "az webapp log config --name $(webAppName) --resource-group $(resourceGroup) --application-logging filesystem --level verbose"

          # Configurar App Service (Restaurado: wkhtmltopdf)
          - task: AzureAppServiceSettings@1
            displayName: "Configure App Settings with wkhtmltopdf"
            inputs:
              azureSubscription: "$(azureServiceConnectionId)"
              appName: "$(webAppName)"
              resourceGroupName: "$(resourceGroup)"
              # Solo incluimos la configuración esencial. La BD y Secret Key ya están en el App Service.
              appSettings: |
                [
                  {"name": "SCM_DO_BUILD_DURING_DEPLOYMENT", "value": "true", "slotSetting": false},
                  {"name": "WEBSITES_PORT", "value": "8000", "slotSetting": false}
                ]
              # Comando de inicio: Instala wkhtmltopdf y luego inicia la app
              startupCommand: "apt-get update && apt-get install -y wkhtmltopdf && gunicorn --bind=0.0.0.0:8000 --timeout 600 app:app"

          # Despliegue
          - task: AzureWebApp@1
            displayName: "Deploy code to Azure Web App"
            inputs:
              azureSubscription: "$(azureServiceConnectionId)"
              appType: "webAppLinux"
              appName: "$(webAppName)"
              package: "$(Pipeline.Workspace)/drop/drop.zip"
              deploymentMethod: "zipDeploy"
              runtimeStack: "PYTHON|3.10"