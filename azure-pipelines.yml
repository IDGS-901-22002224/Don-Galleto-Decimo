# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one that's appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

# Python to Linux Web App on Azure

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '956b817f-06c4-418d-98a3-b599810549b5'

  # Web app name
  webAppName: 'mi-flask-app-2025'

  # Environment name
  environmentName: 'mi-flask-app-2025'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # La versión 3.11 se muestra en tu captura inicial, la usaremos aquí.
  pythonVersion: '3.11' 

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool: Default  # Usar el agente autohospedado 'Default'
    steps:
    
    # --- CORRECCIÓN 1: GIT Checkout (fetchDepth: 0) ---
    - checkout: self
      fetchDepth: 0  
    # ----------------------------------------------------

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    # --- CORRECCIÓN 2: Instalación de Python (SINTAXIS CORREGIDA) ---
    # Usamos la tarea PowerShell@2 para que el script de activación funcione sin errores de sintaxis.
    - task: PowerShell@2 
      displayName: "Install VENV and requirements"
      inputs:
        targetType: 'inline'
        script: |
          python -m venv antenv
          .\antenv\Scripts\activate.ps1 # Script de activación de PowerShell
          # Ya que el VENV está activado, pip y python apuntan al VENV
          python -m pip install --upgrade pip
          pip install setup
          pip install -r requirements.txt
        workingDirectory: $(projectRoot)
    # ----------------------------------------------------------------------

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool: Default  # Usar el agente autohospedado 'Default'
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:

          # --- CORRECCIÓN 3: Hard Linking Failed! (Solución más fuerte) ---
          # Se fuerza la descarga con copia simple para evitar el error de permisos.
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact (No Hard Link)'
            inputs:
              artifactName: 'drop'
              preferSymlinks: false 
              targetPath: '$(Pipeline.Workspace)' # Ruta corta
          # ----------------------------------------------------------------------

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : mi-flask-app-2025'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              # La ruta de package se ajusta a la descarga anterior
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'