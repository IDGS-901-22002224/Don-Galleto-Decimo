# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: ubuntu-latest

strategy:
  matrix:
    Python38:
      python.version: '3.8'
    Python39:
      python.version: '3.9'
    Python310:
      python.version: '3.10'
    Python311:
      python.version: '3.11'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies (Flask, etc.)'

- script: |
    # Instala pytest y su extensión para reportar resultados en Azure DevOps
    pip install pytest pytest-azurepipelines
    # Ejecuta tus pruebas unitarias
    pytest
  displayName: 'Run tests with pytest'
  # Puedes añadir "continueOnError: true" si quieres que el pipeline continúe 
  # incluso si algunas pruebas fallan (aunque no es la práctica recomendada).

# Paso opcional pero muy recomendado para CI/CD: Publicar el código como un artefacto
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)'
    ArtifactName: 'flask-app-$(python.version)'
    publishLocation: 'Container'
  displayName: 'Publish Application Artifact'