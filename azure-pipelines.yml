trigger:
- main

variables:
  azureServiceConnectionId: "Conexion-Flask-Students"
  webAppName: "mi-flask-app-2025"
  # Última corrección del Grupo de Recursos (si el anterior falló)
  resourceGroup: "RG-MIAppFlask" 
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.10' # Definimos la versión aquí

# ===============================================================
# Etapa de Build
# ===============================================================
stages:
  - stage: Build
    displayName: "1. Build Stage"
    jobs:
      - job: BuildJob
        displayName: "Build and Package"
        pool:
          name: "Default"
        steps:
          # CLAVE: Usar la Tarea de Azure para encontrar/instalar Python
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
            displayName: 'Use Python $(pythonVersion)'

          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            workingDirectory: $(projectRoot)
            displayName: "Install Python dependencies"

          - task: ArchiveFiles@2
            displayName: "Archive project files"
            inputs:
              rootFolderOrFile: "$(projectRoot)"
              includeRootFolder: false
              archiveType: zip
              archiveFile: "$(Build.ArtifactStagingDirectory)/drop.zip"
              replaceExistingArchive: true

          - publish: "$(Build.ArtifactStagingDirectory)/drop.zip"
            artifact: drop
            displayName: "Publish deployment package"

# ===============================================================
# Etapa de Deploy (Asume que los tests pasaron o se eliminaron)
# ===============================================================
  - stage: Deploy
    displayName: "2. Deploy Web App"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: "Deploy to Azure Web App Linux"
        pool:
          name: "Default"
        steps:
          - download: current
            artifact: drop
            displayName: "Download build artifacts"

          # Tarea 1: Configurar App Service (incluye wkhtmltopdf y gunicorn)
          - task: AzureAppServiceSettings@1
            displayName: "Configure App Settings and Startup"
            inputs:
              azureSubscription: "$(azureServiceConnectionId)"
              appName: "$(webAppName)"
              resourceGroupName: "$(resourceGroup)"
              # Configuración de variables (usa los valores que ya pusiste manualmente)
              appSettings: |
                [
                  {"name": "SCM_DO_BUILD_DURING_DEPLOYMENT", "value": "true", "slotSetting": false}, # Fuerza la instalación de librerías en Azure
                  {"name": "WEBSITES_PORT", "value": "8000", "slotSetting": false}
                ]
              # Comando de inicio: Instala wkhtmltopdf y luego inicia la app
              startupCommand: "apt-get update && apt-get install -y wkhtmltopdf && gunicorn --bind=0.0.0.0:8000 --timeout 600 app:app"

          # Tarea 2: Despliegue del código
          - task: AzureWebApp@1
            displayName: "Deploy code to Azure Web App"
            inputs:
              azureSubscription: "$(azureServiceConnectionId)"
              appType: "webAppLinux"
              appName: "$(webAppName)"
              package: "$(Pipeline.Workspace)/drop/drop.zip"
              deploymentMethod: "zipDeploy"
              runtimeStack: "PYTHON|3.10"